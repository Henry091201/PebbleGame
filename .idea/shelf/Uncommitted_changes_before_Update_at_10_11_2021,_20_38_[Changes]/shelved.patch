Index: PebbleGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.*;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class PebbleGame {\n    public static final Scanner input = new Scanner(System.in);\n    public static String[] output;  //Where each players output will be written to\n    private  volatile static boolean gameWon;\n\n    //Should have a nested player class\n    public static class Player implements Runnable{\n\n        private static final ArrayList<Player> players = new ArrayList<>();\n        private int id;\n        private ArrayList<Pebble> pebbleArrayList = new ArrayList<>();\n        private int runningTotal;\n        private Bag lastBag; // The bag where the last draw came from\n        //constructor\n        public Player(int id){\n            this.id = id;\n        }\n\n        //Methods\n        public void addPlayer(int id){players.add(new Player(id));}\n\n        public void addPebble(Pebble pebble){\n            pebbleArrayList.add(pebble);\n            runningTotal += pebble.getWeight();\n        }\n        public void removePebble(Pebble pebble){\n            pebbleArrayList.remove(pebble);\n            runningTotal -= pebble.getWeight();\n        }\n        public synchronized void drawTen(){\n\n            Pebble chosenPebble;\n\n            //pick a random black bag\n            Random rand = new Random();\n            int bagNumber = rand.nextInt(3);\n            Bag blackBag = Bag.getBlackBags().get(bagNumber);   // Picks the random black bag\n            while(blackBag.getPebbles().size() < 10){           //Loops until it finds a black bag with enough pebbles in\n                bagNumber = rand.nextInt(3);\n                blackBag = Bag.getBlackBags().get(bagNumber);\n            }\n\n            for(int i = 0; i < 10; i++){        // Select the ten pebbles randomly\n                synchronized (blackBag){\n                    chosenPebble = blackBag.getPebbles().get(rand.nextInt(Bag.getSize(blackBag)));  //select the pebble\n                    Bag.removePebble(blackBag, chosenPebble);   //remove the pebble from black bag\n                }\n                addPebble(chosenPebble); // adds pebble to player\n                lastBag = blackBag;\n                output[id] += \"player\" + id + \" has drawn a \"+ chosenPebble.getWeight() + \"from bag \"+blackBag.getBagLetter() + '\\n';\n                output[id] += \"player\" + id+\" hand is \" + pebbleArrayList.toString() + \"\\n\";\n            }\n            checkWin();\n        }\n        public void draw(){\n            // Randomly pick black bag\n            Pebble chosenPebble;\n            Random rand = new Random();\n            int bagNumber = rand.nextInt(3);\n            Bag blackBag = Bag.getBlackBags().get(bagNumber);\n            System.out.println(blackBag.getBagLetter());\n            // Check if empty: yes --> fill corresponding; no --> draw pebble\n               while(true) {//in case there are more than 1 empty bag at the same time\n                   if (blackBag.getPebbles().size() == 0) {\n                       System.out.println(blackBag.getPebbles().size());\n                       synchronized (this) {\n                           Bag.bagFill(Bag.getWhiteBags().get(bagNumber), blackBag);// Empties white bag into corresponding black bag\n                           output[id] += \"player\" + id + \" is filling bag\" + blackBag.getBagLetter() + \" with bag \" + Bag.getWhiteBags().get(bagNumber).getBagLetter() + \"\\n\";\n                       }\n                   } else {\n                       break;\n                   }\n               }\n            //remove random pebble from black bag: sync\n            synchronized (blackBag){\n                chosenPebble = blackBag.getPebbles().get(rand.nextInt(Bag.getSize(blackBag)));  //select the pebble\n                Bag.removePebble(blackBag, chosenPebble);   //remove the pebble from black bag\n            }\n            output[id] += \"player\" + id + \" has drawn a \"+ chosenPebble.getWeight() + \"from bag \"+blackBag.getBagLetter() + '\\n';\n            output[id] += \"player\" + id+\" hand is \" + pebbleArrayList.toString() + \"\\n\";\n            //add it to player\n            addPebble(chosenPebble);\n            lastBag = blackBag;\n            checkWin();\n        }\n        public void discard(){\n            //Remove the pebble from the player\n            Random random = new Random();\n            int indexPebble = random.nextInt(pebbleArrayList.size());\n            Pebble chosenPebble = pebbleArrayList.get(indexPebble);\n            removePebble(chosenPebble);\n            Bag whiteBag;\n            switch (lastBag.getBagLetter()){        // adds it to the corresponding white bag\n                case 'X':\n                    whiteBag = Bag.getWhiteBags().get(0);\n                    break;\n                case 'Y':\n                    whiteBag = Bag.getWhiteBags().get(1);\n                    break;\n                case 'Z':\n                    whiteBag = Bag.getWhiteBags().get(2);\n                    break;\n                default:\n                    throw new IllegalStateException(\"Unexpected value: \" + lastBag.getBagLetter());\n            }\n            synchronized (whiteBag){\n                whiteBag.addPebble(chosenPebble);\n                output[id] += \"player\" +id+ \" has discarded a \"+ chosenPebble.toString() + \"to bag \" +whiteBag.getBagLetter() + \"\\n\";\n                output[id] += \"player\" + id+\" hand is \" + pebbleArrayList.toString() + \"\\n\";\n            }\n            checkWin();\n        }\n        public void checkWin(){\n            if(pebbleArrayList.size() == 10){\n                if(runningTotal == 100){\n                    gameWon = true;\n                    output[id] += \"player\" +id+ \" has won the game.\";\n                }\n            }\n        }\n\n\n        public void run(){\n            try {\n                drawTen();\n                while (!gameWon){\n                    draw();\n                    discard();\n                }\n            }catch (Exception e){\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static void addPlayer(int id) {\n        PebbleGame.Player.players.add(new Player(id));\n    }\n\n    //Read file Method\n\n    /**\n     * Takes the name of the file for a black bag. Validates the content format with validateWeights method.\n     * Checks there are 11 times the amount of pebbles than players.\n     * @param filename name of black bag input file\n     * @return a Str[] containing all the weights of pebbles\n     * @throws IOException TODO: Catch it\n     */\n    public static String[] addFile(String filename) throws IOException {\n\n        String line = null;\n        BufferedReader bufferedReader = null;\n        String[] weights = null;\n\n        try {\n            //reading the file\n            File file = new File(filename);\n            FileReader fileReader = new FileReader(file);\n            bufferedReader = new BufferedReader(fileReader);\n            // Validate the file content format\n            while ((line = bufferedReader.readLine()) != null){\n                //Validates the file content is in the correct format\n                if(validateWeights(line)){\n                    weights = line.replaceAll(\"\\\\s+\",\"\").split(\",\");\n                }else {\n                    System.out.println(\"The file didn't follow the specified format.\");\n                    return null;\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch(NoSuchElementException e) {\n            e.printStackTrace();\n        } finally {\n            // close the buffered reader\n            //bufferedReader.close();\n        }\n        // Checks if there is 11 times the amount of pebbles than players\n        if(weights.length < 11*Player.players.size()){\n            System.out.println(\"There is not 11 Times the amount of pebbles than players, please input another file\");\n            return null;\n        }\n        return weights;\n    }\n\n    public static void askForBags() throws IOException {\n        ArrayList<Bag> blackBags = Bag.getBlackBags();\n        int i = 0;\n\n        while(i<3) {\n\n            Bag bag = blackBags.get(i);\n\n            // input the file\n            System.out.println(\"Please enter the location of bag number \" + i + \" to load:\");\n            String filename = input.next();\n\n            File file = new File(filename);\n\n            // checks if the file is in the directory\n            while(!file.exists()) {\n                // input the file\n                System.out.println(\"This file is not in the directory!\");\n                System.out.println(\"Please enter the location of bag number \" + i + \" to load:\");\n                filename = input.next();\n\n                file = new File(filename);\n                if(file.exists()) {\n                    break;\n                }\n            }\n\n            // store the weights\n            String[] weights = null;\n\n            weights = PebbleGame.addFile(filename);\n\n            // fill the bag with the weights only if the file was validated correctly\n            if(weights != null){\n                PebbleGame.fillBag(bag, weights);\n                i++;\n            }\n\n        }\n\n        input.close();\n    }\n\n    /**\n     * Checks the file follows the correct format\n     * @param line\n     * @return Bool. True if follows correct format\n     */\n    public static Boolean validateWeights(String line) {\n        //Checks file content is in the correct format\n        if (line.matches(\"(\\\\d+(,)?\\\\s?)+\")) {\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n\n    /**\n     * Adds all the white and black bags to the arrays\n     */\n    public static void setupBags(){\n        // Add the black bags to the array\n        Bag.setBlackBags(new Bag(\"black\", 'X'));\n        Bag.setBlackBags(new Bag(\"black\", 'Y'));\n        Bag.setBlackBags(new Bag(\"black\", 'Z'));\n        // Add the white bags to the array\n        Bag.setWhiteBags(new Bag(\"white\", 'A'));\n        Bag.setWhiteBags(new Bag(\"white\", 'B'));\n        Bag.setWhiteBags(new Bag(\"white\", 'C'));\n    }\n    public static void setupPlayers(){\n        //input the amount of player\n\n        System.out.println(\"Please enter the number of players:\");\n\n        if(input.hasNextInt()){\n            int number = input.nextInt();\n            // Checks the input is strictly positive\n            while(number < 1){\n                System.out.println(\"Error: Number of players must be strictly positive. Please retry\");\n                number = input.nextInt();\n            }\n            // create the number of players as inputted and add them to the list of players\n            for(int i=0; i<number; i++) {\n                PebbleGame.addPlayer(i);\n            }\n            output = new String[number]; // Set the output array to the amount of players\n        }else {\n            input.nextLine();\n            System.out.println(\"Please enter a number\");\n            setupPlayers();\n\n        }\n\n\n\n\n    }\n\n\n\n    /**\n     * Takes a bag object and uses a Str[] to fill it with weights\n     * @param bag bag object (should be black)\n     * @param weights String list filled with string type integers separated by commas\n     */\n    public static void fillBag(Bag bag, String[] weights) {\n\n        int weight;\n\n        // iterate through the array\n        for (String s : weights) {\n            weight = Integer.parseInt(s);\n            if (weight < 1) {\n                throw new RuntimeException(\"The weight must be positive\");\n            }\n            bag.addPebble(new Pebble(weight));\n        }\n    }\n    public static void printOutputs() throws IOException {\n\n        try {\n            // Creates new directory for the outputs\n            File dirLocation = new File(\"Player Outputs/\");\n            // Removes any old output files\n            if (!dirLocation.mkdir()) {\n                for (File file : dirLocation.listFiles()) {\n                    file.delete();\n                }\n            }\n            // Writes the output files to the directory\n            for (int i = 0; i < (Player.players.size()); i++) {\n                Path path = Paths.get(\"Player Outputs/player\" + i + \"_output.txt\");\n                Files.write(path, Collections.singleton((output[i])), StandardCharsets.UTF_8);\n            }\n            System.out.println(\"Player outputs have successfully been written to text files in the \" +\n                    \"directory \\\"Player Outputs\\\".\");\n\n        } catch (IOException e) {\n            System.out.println(\"Failed to write some or all outputs to file. Please make sure:\" +\n                    \"\\n\\t - any old output files are not opened or used by another program,\" +\n                    \"\\n\\t - you have the required permissions to write to a file.\");\n        }\n    }\n    public static void main(String[] args) throws IOException {\n        // Pre threading\n        /**\n         * To-Do:\n         * Strictly positive number of players :)\n         * Three white bads A,B,C :)    yes\n         * Three black bags X,Y,Z :)    yes\n         *\n         * Request the number of players ---> Err: Players are greater than 0   yes\n         * Request the location of the 3 Files ---> Err: Correct file type      no\n         * Validate the 3 files ---> In the right format, only contains integers, each bag contains 11 times the number of players  yes\n         */\n\n        // Creates the white and Black Bags\n        setupBags();\n\n\n        System.out.println(\"\\nWelcome to the PebbleGame!!\");\n        System.out.println(\"You will be asked to enter the number of players.\");\n        System.out.println(\"and then for the location of three files in turn containing comma separated integer values for the pebble weights.\");\n        System.out.println(\"The integer values must be strictly positive.\");\n        System.out.println(\"The game will then be simulated, and written to files in this directory.\\n\");\n\n        // Asks for player number and creates the player objects\n\n        setupPlayers();\n        askForBags();\n\n\n        //Post Threading - starts before they draw their initial pebbles\n        /**\n         * Each player take 10 pebbles\n         * win condition: player has ten pebbles with weight totalling exactly 100\n         * Once black bag empty, all pebbles from white bag emptied into it. X filled by A, Y by B\n         * Drawing black pebbles is uniformly at random\n         * players act as concurrent threads\n         * Drawing and discarding are atomic actions (cont)\n         * Bag pebble is discarded to is paired to white bag that pebble just came from\n         * If player attempts to draw from empty bag, try again till they select a bag with pebbles\n         */\n        ArrayList<Bag> blackBags = Bag.getBlackBags();\n        ArrayList<Bag> whiteBags = Bag.getWhiteBags();\n\n        ExecutorService es = Executors.newFixedThreadPool(Player.players.size());\n        for (int i = 0; i < Player.players.size(); i++) {\n            Thread player = new Thread(new Player(i));\n            es.execute(new Thread(player));\n        }\n        es.shutdown();\n\n        // Shuts the game down after 1 minute (so that it does not run forever)\n        try {\n            es.awaitTermination(60, TimeUnit.SECONDS);\n\n        } catch(InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        if(!es.isTerminated()){\n            es.shutdownNow();\n            printOutputs();\n            System.out.println(\"Game ran for over 1 minute and it may be impossible to simulate it, so\" +\n                    \"it has been interrupted.\");\n            System.exit(0);\n        }\n\n        printOutputs();\n\n        System.out.println(\"Player   draws! Saving player outputs...\");\n        printOutputs();\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/PebbleGame.java b/PebbleGame.java
--- a/PebbleGame.java	(revision e2007d9365da4b0ad0c5a7d1847eebbc3e5c970a)
+++ b/PebbleGame.java	(date 1636576720566)
@@ -103,20 +103,12 @@
             int indexPebble = random.nextInt(pebbleArrayList.size());
             Pebble chosenPebble = pebbleArrayList.get(indexPebble);
             removePebble(chosenPebble);
-            Bag whiteBag;
-            switch (lastBag.getBagLetter()){        // adds it to the corresponding white bag
-                case 'X':
-                    whiteBag = Bag.getWhiteBags().get(0);
-                    break;
-                case 'Y':
-                    whiteBag = Bag.getWhiteBags().get(1);
-                    break;
-                case 'Z':
-                    whiteBag = Bag.getWhiteBags().get(2);
-                    break;
-                default:
-                    throw new IllegalStateException("Unexpected value: " + lastBag.getBagLetter());
-            }
+            Bag whiteBag = switch (lastBag.getBagLetter()) {        // adds it to the corresponding white bag
+                case 'X' -> Bag.getWhiteBags().get(0);
+                case 'Y' -> Bag.getWhiteBags().get(1);
+                case 'Z' -> Bag.getWhiteBags().get(2);
+                default -> throw new IllegalStateException("Unexpected value: " + lastBag.getBagLetter());
+            };
             synchronized (whiteBag){
                 whiteBag.addPebble(chosenPebble);
                 output[id] += "player" +id+ " has discarded a "+ chosenPebble.toString() + "to bag " +whiteBag.getBagLetter() + "\n";
